//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_CUSTOM_ASSETS/_EYEAssets/Inputs/Input_ConvoyDefender.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_ConvoyDefender: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_ConvoyDefender()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_ConvoyDefender"",
    ""maps"": [
        {
            ""name"": ""Defender"",
            ""id"": ""75e01122-7e12-4daa-a3b8-070f984781ca"",
            ""actions"": [
                {
                    ""name"": ""Turning"",
                    ""type"": ""Value"",
                    ""id"": ""2e42030c-aebc-4cf4-bf0c-b71b5aff106f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Button"",
                    ""id"": ""57748091-56ee-4217-94ae-80e97358e07e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Firing"",
                    ""type"": ""Button"",
                    ""id"": ""eb28ee3b-be04-44ff-a2a3-b16253322190"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""0e31208c-414e-42fc-9074-2b34189822a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""918a48e5-b0bf-4102-b1dc-dc711abdd650"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Firing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd0faaaa-dcaa-45a5-9905-1fdd645fbf4c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Firing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3afc3c5-5ae6-4c4f-9634-54a174ade6bb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Firing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73a1b235-9f63-445d-a9a6-5ed7b9831d25"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""713aca6f-ba50-4ad7-abe7-abb48f3e6b9e"",
                    ""path"": ""<XInputController>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard/Mouse"",
                    ""id"": ""e65dbf3d-ddd9-450f-9b3a-f0121bd4f672"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""faada5e3-7006-4384-b830-534f3a47207f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""48311595-3aa2-4a5e-b248-da3732bd439e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XBOX"",
                    ""id"": ""6b65deed-2f26-454f-8b55-36daf221fafa"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""af34c0df-351b-49a2-a265-4cae70ea676f"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""463da867-5583-4d48-9f4b-780dbe3b7279"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard/Mouse"",
                    ""id"": ""65e18cb4-7131-4535-9246-acc99340f004"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8dc648b9-d44f-41fb-8f60-ba63579a9e88"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f05c8237-f579-4d1e-a92b-918b404681b3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XBOX"",
                    ""id"": ""c357980a-6e3e-490b-af79-85e6bf3c736c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0adf1b47-7e35-47fc-a339-b5f5b6453173"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""45eb44fa-7c56-4141-87dd-69427c22acb6"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Defender
        m_Defender = asset.FindActionMap("Defender", throwIfNotFound: true);
        m_Defender_Turning = m_Defender.FindAction("Turning", throwIfNotFound: true);
        m_Defender_Acceleration = m_Defender.FindAction("Acceleration", throwIfNotFound: true);
        m_Defender_Firing = m_Defender.FindAction("Firing", throwIfNotFound: true);
        m_Defender_Boost = m_Defender.FindAction("Boost", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Defender
    private readonly InputActionMap m_Defender;
    private List<IDefenderActions> m_DefenderActionsCallbackInterfaces = new List<IDefenderActions>();
    private readonly InputAction m_Defender_Turning;
    private readonly InputAction m_Defender_Acceleration;
    private readonly InputAction m_Defender_Firing;
    private readonly InputAction m_Defender_Boost;
    public struct DefenderActions
    {
        private @Input_ConvoyDefender m_Wrapper;
        public DefenderActions(@Input_ConvoyDefender wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turning => m_Wrapper.m_Defender_Turning;
        public InputAction @Acceleration => m_Wrapper.m_Defender_Acceleration;
        public InputAction @Firing => m_Wrapper.m_Defender_Firing;
        public InputAction @Boost => m_Wrapper.m_Defender_Boost;
        public InputActionMap Get() { return m_Wrapper.m_Defender; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefenderActions set) { return set.Get(); }
        public void AddCallbacks(IDefenderActions instance)
        {
            if (instance == null || m_Wrapper.m_DefenderActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefenderActionsCallbackInterfaces.Add(instance);
            @Turning.started += instance.OnTurning;
            @Turning.performed += instance.OnTurning;
            @Turning.canceled += instance.OnTurning;
            @Acceleration.started += instance.OnAcceleration;
            @Acceleration.performed += instance.OnAcceleration;
            @Acceleration.canceled += instance.OnAcceleration;
            @Firing.started += instance.OnFiring;
            @Firing.performed += instance.OnFiring;
            @Firing.canceled += instance.OnFiring;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
        }

        private void UnregisterCallbacks(IDefenderActions instance)
        {
            @Turning.started -= instance.OnTurning;
            @Turning.performed -= instance.OnTurning;
            @Turning.canceled -= instance.OnTurning;
            @Acceleration.started -= instance.OnAcceleration;
            @Acceleration.performed -= instance.OnAcceleration;
            @Acceleration.canceled -= instance.OnAcceleration;
            @Firing.started -= instance.OnFiring;
            @Firing.performed -= instance.OnFiring;
            @Firing.canceled -= instance.OnFiring;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
        }

        public void RemoveCallbacks(IDefenderActions instance)
        {
            if (m_Wrapper.m_DefenderActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefenderActions instance)
        {
            foreach (var item in m_Wrapper.m_DefenderActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefenderActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefenderActions @Defender => new DefenderActions(this);
    public interface IDefenderActions
    {
        void OnTurning(InputAction.CallbackContext context);
        void OnAcceleration(InputAction.CallbackContext context);
        void OnFiring(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
}
